# convert this list to lists of 100 questions, with ones in place of question numbers
TPQQuestions_list = sapply(TPQQuestions_list, function(x) ifelse(1:100 %in% x,1,0))
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions))
colnames (TPQQuestions) = c(1:100)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions[c(101,1:100,102)]
rbind(IC_threshold,TPQQuestions)
IC_threshold
# create a new data frame that has the resemblance values for each subject
Cloninger_perce = rbind(IC_threshold,TPQQuestions)
Cloninger_perce
Cloninger_perce$ID[Cloninger_perce$ID==1]
Cloninger_perce$ID[Cloninger_perce$ID==1,]
Cloninger_perce$ID==1
Cloninger_perce[Cloninger_perce$ID==1,]
TPQQuestions_list
TPQQuestions_list$NS1
TPQQuestions_list$NS1
TPQQuestions_list
TPQQuestions_list["NS1"]
TPQQuestions_list[["NS1"]]
TPQQuestions_list
TPQQuestions_list[1,]
TPQQuestions_list[,1]
Cloninger_perce[Cloninger_perce$ID==1,] - TPQQuestions_list[,1]
Cloninger_perce[Cloninger_perce$ID==1,]
Cloninger_perce[Cloninger_perce$ID==1,c(2:101)] - TPQQuestions_list[,1]
abs(Cloninger_perce[Cloninger_perce$ID==1,c(2:101)] - TPQQuestions_list[,1])
sum(abs(Cloninger_perce[Cloninger_perce$ID==1,c(2:101)] - TPQQuestions_list[,1]))
Cloninger_perce$NS[Cloninger_perce$ID==1]=1
Cloninger_perce$NS
# create a new data frame that has the resemblance values for each subject
Cloninger_perce = rbind(IC_threshold,TPQQuestions)
data_fast
#create a function to determine the loading similarity for all TPQgroups
s_ID = 1
c_item = 1
c_item = 1
sum(abs(Cloninger_perce[Cloninger_perce$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]))
TPQQuestions_list
rownames(TPQQuestions)
TPQQuestions
TPQQuestions_list
colnames(TPQQuestions_list)
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
for (s_ID in Cloninger_perc$ID){
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]))
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]))
percentage
s_ID
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]]
Cloninger_perc
sum(1,2,NA)
sum(c(1,2,NA))
sum(c(1,2,NA), na.rm = TRUE)
#create a function to determine the loading similarity for all TPQgroups
s_ID = 1
c_item = 1
Cloninger_perc
for (s_ID in Cloninger_perc$ID){
print(s_ID)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]),na.rm = TRUE)
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
Cloninger_perc
Cloninger_perc[,c(103:117)]
#Cloninger_perc_melt =
melt(Cloninger_perc[,c(103:117)], value.name = "Threshold", variable.name =  c("Question"), id.vars = c("ID","Diagnosis"))
#Cloninger_perc_melt =
melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Question"), id.vars = c("ID","Diagnosis"))
#Cloninger_perc_melt =
melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 1
Threshold = 0.25
data_frame = data_fast
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
s_ID = 1
c_item = 1
Cloninger_perc
for (s_ID in Cloninger_perc$ID[1:300]){
print(s_ID)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]),na.rm = TRUE)
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_threshold
s_ID
Cloninger_perc_melt
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
Cloninger_perc_melt
Cloninger_perc_melt$ID
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt)
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
Cloninger_perc_melt$ID
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 1
Threshold = 0.25
data_frame = data_info
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
for (s_ID in Cloninger_perc$ID[1:150]){
print(s_ID)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]),na.rm = TRUE)
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
for (s_ID in Cloninger_perc$ID[1:300]){
print(s_ID)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]),na.rm = TRUE)
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
for (s_ID in Cloninger_perc$ID){
print(s_ID)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = sum(abs(Cloninger_perc[Cloninger_perc$ID==s_ID,c(2:101)] - TPQQuestions_list[,c_item]),na.rm = TRUE)
Cloninger_perc[Cloninger_perc$ID==s_ID,colnames(TPQQuestions_list)[c_item]] = percentage
}
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item],1,sum,na.rm = TRUE))
apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),2,sum,na.rm = TRUE)
apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
c_item
colnames(TPQQuestions_list)
colnames(TPQQuestions_list)[c_item]
IC_num = 2
Threshold = 0.25
data_frame = data_info
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000",midpoint = 0.5) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 0.5) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 1
Threshold = 0.25
data_frame = data_info
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
IC_threshold$ID = 1:1819
IC_num = 1
Threshold = 0.25
data_frame = data_info
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 1
Threshold = 0.25
data_frame = data_fast
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 2
Threshold = 0.25
data_frame = data_fast
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
IC_threshold_melt = melt(IC_threshold, value.name = "Threshold", variable.name =  c("Question"), id.vars = c("ID","Diagnosis"))
ggplot(IC_threshold_melt, aes(x = ID, y = Question)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
IC_num = 3
Threshold = 0.25
data_frame = data_fast
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
IC_threshold_melt = melt(IC_threshold, value.name = "Threshold", variable.name =  c("Question"), id.vars = c("ID","Diagnosis"))
ggplot(IC_threshold_melt, aes(x = ID, y = Question)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
# Add Cloninger loadings
TPQQuestions = data.frame(t(TPQQuestions_list))
colnames (TPQQuestions) = c(1:100)
TPQQuestions$ID = rownames(TPQQuestions)
TPQQuestions$Diagnosis = "Cloninger"
# reorder columns to match that of IC_threshold
TPQQuestions = TPQQuestions[c(101,1:100,102)]
# create a new data frame that has the resemblance values for each subject
Cloninger_perc = rbind(IC_threshold,TPQQuestions)
#create a function to determine the loading similarity for all TPQgroups
for (c_item in 1:length(colnames(TPQQuestions_list))){
percentage = apply(abs(Cloninger_perc[,c(2:101)] - TPQQuestions_list[,c_item]),1,sum,na.rm = TRUE)
Cloninger_perc[,colnames(TPQQuestions_list)[c_item]] = percentage
}
Cloninger_perc_melt = melt(Cloninger_perc[,c(1,102:117)], value.name = "Threshold", variable.name =  c("Dimension"), id.vars = c("ID","Diagnosis"))
Cloninger_perc_melt$ID = as.numeric(Cloninger_perc_melt$ID)
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="#D40000", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="blue", midpoint = 50) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="blue", midpoint = 40) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(Cloninger_perc_melt, aes(x = ID, y = Dimension)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient2(low="white", high="blue", midpoint = 40) +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
