melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x]), variable.name = new.factor)
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
Multimelt<-function(dataframe,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[colnames_cond_list]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x]), variable.names = new.factor)
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
Multimelt<-function(dataframe,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[colnames_cond_list]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x]), var.name = new.factor)
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
Multimelt<-function(dataframe,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[colnames_cond_list]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], var.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
Multimelt<-function(dataframe,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[colnames_cond_list]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
bind_data_frames <- function(...) {
# bind the columns two data frames, making sure to remove common columns
# length of the passed arguments in "..."
ar_len = length(match.call())-1
#create a list of all data frames included
if (ar_len == 1){
all_data_list = c(...)
} else{
all_data_list = list(...)
}
#determine the colnames that are found in all data frames
allcolnames = lapply(all_data_list, colnames)
common_colnames = Reduce(intersect, allcolnames)
# you need to be sure that all data frames contain the exact same common columns
common_columns = all_data_list[[1]][common_colnames]
#remove these columns from all data frames
all_data_list = lapply(1:length(all_data_list), function(x)
all_data_list[[x]][!colnames(all_data_list[[x]]) %in% common_colnames])
# bind all data frames (together with the common columns)
final_df = Reduce(bind_cols,list(common_columns,all_data_list))
return(final_df)
}
lapply(1:length(weighted_fast_list), function(x)
bind_data_frames(weighted_fast_list[[x]], data_fast[[x]]))
df_fast_list = lapply(1:length(weighted_fast_list), function(x)
bind_data_frames(weighted_fast_list[[x]], data_fast[[x]]))
df_fast_list = lapply(1:length(weighted_fast_list), function(x)
bind_data_frames(weighted_fast_list[[x]], data_fast[[x]]))
df_noboot_fast_list = lapply(1:length(weighted_noboot_fast_list), function(x)
bind_data_frames(weighted_noboot_fast_list[[x]], data_noboot_fast[[x]]))
df_info_list = lapply(1:length(weighted_info_list), function(x)
bind_data_frames(weighted_info_list[[x]], data_info[[x]]))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
# make sure you have two variables in the final data
data_frame$Type=factor(c(rep("score",nrow(data_frame)/2),rep("loading",nrow(data_frame)/2)))
transition = split(data_frame[-5], data_frame$Type)
transition$loading$score = transition$score$Loading
data_frame = transition$loading
data_frame
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"))
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=Loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=Loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
data_frame
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
df_fast_list
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
value_variables=c(list(weighted_col_list, loading_col_list))
value_variables
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[colnames_cond_list]
common_colnames
idvars
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
idvars = colnames(data_frame)[common_colnames]
idvars
value_variables=c(list(weighted_col_list, loading_col_list))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
idvars
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
loading_list
idvars
Names
new.factor
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
new.factor = "Question"
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
FinalData
Multimelt<-function(data_frame,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame
Multimelt<-function(data_frame,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = loading_list, id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=Loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
data_frame
loading_col_list
weighted_col_list
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
Multimelt<-function(data_frame,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = value_variables[x], id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
data_frame
weighted_col_list
data_frame
Multimelt<-function(data_frame,...,Names=NULL, new.factor="Factor"){
# melt data frame, creating multiple value variables (not just one)
value_variables=c(list(...))
#determine the colnames that are found in all data frames
common_colnames = apply(sapply(1:length(value_variables), function(x)
! colnames(data_frame) %in% value_variables[[x]]), 1, prod) == 1
idvars = colnames(data_frame)[common_colnames]
# create a list of melted data frames, each of them contains one value
# variable alongside the id_vars
melted_dfs = lapply(1:length(Names), function(x)
melt(data_frame, measure.vars = value_variables[[x]], id.vars = idvars, value.name = Names[x], variable.name = new.factor))
FinalData = bind_data_frames(melted_dfs)
return(FinalData)
}
Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
data_frame = df_fast_list[[1]]
data_frame$ID = factor(data_frame$ID, levels = unlist(ID_list))
data_frame = Multimelt(data_frame, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
data_fast
TPQQuestions_list = list(NS1=c(2, 4, 9, 11, 40, 43, 85, 93, 96),
NS2=c(30, 46, 48, 50, 55, 56, 81, 99),
NS3=c(32, 66, 70, 72, 76, 78, 87),
NS4=c(13, 16, 21, 22, 24, 28, 35, 60, 62, 65),
HA1=c(1, 5, 8, 10, 14, 82, 84, 91, 95, 98),
HA2=c(18, 19, 23, 26, 29, 47, 51),
HA3=c(33, 37, 38, 42, 44, 89, 100),
HA4=c(49, 54, 57, 59, 63, 68, 69, 73, 75, 80),
RD1=c(27, 31, 34, 83, 94),
RD2=c(39, 41, 45, 52, 53, 77, 79, 92, 97),
RD3=c(3, 6, 7, 12, 15, 64, 67, 74, 86, 88, 90),
RD4=c(17, 20, 25, 36, 58),
NS=c(2, 4, 9, 11, 40, 43, 85, 93, 96, 30, 46, 48, 50, 55, 56, 81, 99, 32, 66, 70, 72, 76, 78, 87, 13, 16, 21, 22, 24, 28, 35, 60, 62, 65),
HA=c(1, 5, 8, 10, 14, 82, 84, 91, 95, 98, 18, 19, 23, 26, 29, 47, 51, 33, 37, 38, 42, 44, 89, 100, 49, 54, 57, 59, 63, 68, 69, 73, 75, 80),
RD=c(27, 31, 34, 83, 94, 39, 41, 45, 52, 53, 77, 79, 92, 97, 3, 6, 7, 12, 15, 64, 67, 74, 86, 88, 90, 17, 20, 25, 36, 58))
# convert this list to lists of 100 questions, with ones in place of question numbers
TPQQuestions_list = sapply(TPQQuestions_list, function(x) ifelse(1:100 %in% x,1,0))
IC_num = 3
Threshold = 0.25
data_frame = data_fast
# Choose data frame (without the column "arrangement")
IC_threshold = data.frame(data_frame[[IC_num]][,-c(102)])
IC_threshold[,c(2:101)] = abs(IC_threshold[,2:101]) > Threshold
colnames(IC_threshold) = c("ID",1:100, "Diagnosis")
IC_threshold$ID = 1:1819
# change True/False to 1/0
IC_threshold[,c(2:101)] = apply(IC_threshold[,c(2:101)],2,ifelse,1,0)
IC_threshold_melt = melt(IC_threshold, value.name = "Threshold", variable.name =  c("Question"), id.vars = c("ID","Diagnosis"))
ggplot(IC_threshold_melt, aes(x = ID, y = Question)) +
geom_raster(aes(fill=Threshold)) +
scale_fill_gradient(low="white", high="#D40000") +
ggtitle(paste0("Questions That Pass the Threshold of ",Threshold," in IC ", IC_num)) +
TypicalTheme +
theme(axis.text.x = element_text(angle = 90))
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(data_frame, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
data_frame$ID[data_frame$Diagnosis == levels(factor(data_frame$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df = df_fast_list[[1]]
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(question_df, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# choose data frame
question_df = df_fast_list[[1]]
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
data_frame$ID[data_frame$Diagnosis == levels(factor(data_frame$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(question_df, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# choose data frame
question_df = df_fast_list[[1]]
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
question_df$ID[question_df$Diagnosis == levels(factor(question_df$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(question_df, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# choose data frame
question_df = df_fast_list[[1]]
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
question_df$ID[question_df$Diagnosis == levels(factor(question_df$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(question_df, weighted_col_list, loading_col_list, Names = c("score","loading"), new.factor = "Question")
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
TypicalTheme +
geom_hline(yintercept=Diagnoses_positions, size=0.5)
data_frame
data_frame[[1]][loading_col_list]
cor.test(data_frame[[1]][loading_col_list])
cor(data_frame[[1]][loading_col_list])
Correlate(data_frame[[1]]$Q1_load,data_frame[[1]]$Q2_load)
Correlate(data_frame[[1]],"Q1_load","Q2_load")
Correlate(data_frame[[1]],"Q1_load","Q3_load")
data_frame[[1]][loading_col_list][1]
cor.test(data_frame[[1]][loading_col_list][1],data_frame[[1]][loading_col_list][2])
data_frame[[1]][loading_col_list][2]
data_frame[[1]][loading_col_list][,2]
cor.test(data_frame[[1]][loading_col_list][,1],data_frame[[1]][loading_col_list][,2])
aa = cor.test(data_frame[[1]][loading_col_list][,1],data_frame[[1]][loading_col_list][,2])
aa$statistic
aa$parameter
aa$estimate
#sapply(c("IC0","IC1","IC2","IC3","IC4"), function(x) IC_threshold$Threshold[IC_threshold$IC == x])
mapply(cor.test(x,y)$estimate, data_frame[[1]][loading_col_list], data_frame[[1]][loading_col_list])
#sapply(c("IC0","IC1","IC2","IC3","IC4"), function(x) IC_threshold$Threshold[IC_threshold$IC == x])
mapply(cor.test, data_frame[[1]][loading_col_list], data_frame[[1]][loading_col_list])
#sapply(c("IC0","IC1","IC2","IC3","IC4"), function(x) IC_threshold$Threshold[IC_threshold$IC == x])
mapply(function(x,y) cor.test(x,y)$estimate, data_frame[[1]][loading_col_list], data_frame[[1]][loading_col_list])
sapply(c("IC0","IC1","IC2","IC3","IC4"), function(x) IC_threshold$Threshold[IC_threshold$IC == x])
options(device = "X11")
library(reticulate)
if (dir.exists("/home/abdulrahman/anaconda3/envs/mne/bin/")){
use_python ("/home/abdulrahman/anaconda3/envs/mne/bin/python3")
}else{
use_python ("/home/asawalma/anaconda3/envs/mne/bin/python")
}
library(ggplot2)
library(psy)
reticulate::repl_python()
