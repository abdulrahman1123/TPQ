common_columns = all_data_list[[1]][common_colnames]
#remove these columns from all data frames
all_data_list = lapply(1:length(all_data_list), function(x)
all_data_list[[x]][!colnames(all_data_list[[x]]) %in% common_colnames])
# bind all data frames (together with the common columns)
final_df = Reduce(bind_cols,list(common_columns,all_data_list))
return(final_df)
}
df_fast_list = lapply(1:length(weighted_fast_list), function(x)
bind_data_frames(weighted_fast_list[[x]], data_fast[[x]]))
df_noboot_fast_list = lapply(1:length(weighted_noboot_fast_list), function(x)
bind_data_frames(weighted_noboot_fast_list[[x]], data_noboot_fast[[x]]))
df_info_list = lapply(1:length(weighted_info_list), function(x)
bind_data_frames(weighted_info_list[[x]], data_info[[x]]))
# define column names to be included for the loadings and those for the weighted final scores
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# define column names to be included for the loadings and those for the weighted final scores
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# define a function to plot loadings
plot_questions <- function(question_df, plotting = "loadings") {
# plotting can be set to "loadings", "scores" or "both"
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
question_df$ID[question_df$Diagnosis == levels(factor(question_df$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(
question_df,
weighted_col_list,
loading_col_list,
Names = c("score", "loading"),
new.factor = "Question"
)
# check each question for the following condition:
# dt = double_threshold: if the count of the above-threshold loadings is more than 80% for that question,
# then this question is included
included_loadings_dt = sapply(1:100, function(x)
sum(question_df$loading[question_df$Question == weighted_col_list[x]] > 0.25, na.rm = TRUE) > (0.8 * 1819))
included_scores_dt = sapply(1:100, function(x)
sum(question_df$score[question_df$Question == weighted_col_list[x]] > 0.25, na.rm = TRUE) > (0.8 * 1819))
# av = average: if the average loading is >0.25, this question is included
averages_loadings = sapply(1:100, function(x)
mean(question_df$loading[question_df$Question == weighted_col_list[x]],na.rm = TRUE))
included_loadings_av = averages_loadings>0.25
averages_scores = sapply(1:100, function(x)
mean(question_df$score[question_df$Question == weighted_col_list[x]],na.rm = TRUE))
included_scores_av = averages_scores>0.25
#plot loadings
load_plot = ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1)) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
geom_hline(yintercept=Diagnoses_positions, size=0.5)+
annotate(geom="text", x=-3.5, y=c(Diagnoses_positions-15, -15, 1845, 1885),
label=c("GAD","HC","MDD","PTSD","TNP", "Ex. Questions","DT. Questions","AVG. Questions"), size = 4)+
coord_cartesian(ylim =c(-30,1900), xlim = c(-7,100))+
geom_point(data = data.frame(Inc_q = included_loadings_dt*1860-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#1B4D3E", inherit.aes = FALSE)+
geom_point(data = data.frame(Inc_q = included_loadings_av*1900-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#6cBE58", inherit.aes = FALSE)+
TypicalTheme
#plot scores
score_plot = ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1)) +
ggtitle(label = "Final Scores for All Subjects", subtitle = "For the 5 Groups of Subjects")+
geom_hline(yintercept=Diagnoses_positions, size=0.5)+
annotate(geom="text", x=-3.5, y=c(Diagnoses_positions-15, -15, 1845, 1885),
label=c("GAD","HC","MDD","PTSD","TNP", "Ex. Questions","DT. Questions","AVG. Questions"), size = 4)+
coord_cartesian(ylim =c(-30,1900), xlim = c(-7,100))+
geom_point(data = data.frame(Inc_q = included_scores_dt*1860-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#1B4D3E", inherit.aes = FALSE)+
geom_point(data = data.frame(Inc_q = included_scores_av*1900-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#6cBE58", inherit.aes = FALSE)+
TypicalTheme
# return the both figures if mult_plot is set to TRUE. Otherwise, return loadings only
if (plotting == "loadings"){
return (load_plot)
}else if (plotting == "scores"){
return (score_plot)
}else if(plotting == "both"){
return(multiplot(load_plot,score_plot,cols = 2))
}else{
return("Please set a valid argument for plotting, it can be set to 'loadings', 'scores' or 'both'")
}
}
fig_dir = "/home/asawalma/git/TPQ/figures"
if (!dir.exists(fig_dir)) {
fig_dir = "/home/abdulrahman/git/TPQ/figures"
}
#save all figures for each of the IC data frames
sapply(1: length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_FastICA_Boot_",x,".png"),
plot = plot_questions(df_fast_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
sapply(1: length(df_noboot_fast_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_FastICA_NoBoot_",x,".png"),
plot = plot_questions(df_noboot_fast_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
#save all figures for each of the IC data frames
sapply(1: length(df_info_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_Infomax_Boot_",x,".png"),
plot = plot_questions(df_info_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
# define column names to be included for the loadings and those for the weighted final scores
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
# define a function to plot loadings
plot_questions <- function(question_df, plotting = "loadings") {
# plotting can be set to "loadings", "scores" or "both"
# force the levels of "ID" to follow the diagnosis (make sure they are not divided into two sessions)
# First, find the IDs that represent each of the Diagnoses
ID_list = sapply(1:5, function(x)
question_df$ID[question_df$Diagnosis == levels(factor(question_df$Diagnosis))[x]])
#extract the length of each item so that it can be plotted as a horizontal line to separate each group
Diagnoses_positions = sapply(1:5, function (x)
sum(sapply(ID_list[1:x], function(y)
length(y))))
#Change the ID into a factor, make sure the factor levels separate the data into 5 Diagnosis groups
question_df$ID = factor(question_df$ID, levels = unlist(ID_list))
question_df = Multimelt(
question_df,
weighted_col_list,
loading_col_list,
Names = c("score", "loading"),
new.factor = "Question"
)
# check each question for the following condition:
# dt = double_threshold: if the count of the above-threshold loadings is more than 80% for that question,
# then this question is included
included_loadings_dt = sapply(1:100, function(x)
sum(abs(question_df$loading[question_df$Question == weighted_col_list[x]]) > 0.25, na.rm = TRUE) > (0.8 * 1819))
included_scores_dt = sapply(1:100, function(x)
sum(abs(question_df$score[question_df$Question == weighted_col_list[x]]) > 0.25, na.rm = TRUE) > (0.8 * 1819))
# av = average: if the average loading is >0.25, this question is included
averages_loadings = sapply(1:100, function(x)
mean(question_df$loading[question_df$Question == weighted_col_list[x]],na.rm = TRUE))
included_loadings_av = abs(averages_loadings)>0.25
averages_scores = sapply(1:100, function(x)
mean(question_df$score[question_df$Question == weighted_col_list[x]],na.rm = TRUE))
included_scores_av = abs(averages_scores)>0.25
#plot loadings
load_plot = ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=loading)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1)) +
ggtitle(label = "Final Loadings for All Subjects", subtitle = "For the 5 Groups of Subjects")+
geom_hline(yintercept=Diagnoses_positions, size=0.5)+
annotate(geom="text", x=-3.5, y=c(Diagnoses_positions-15, -15, 1845, 1885),
label=c("GAD","HC","MDD","PTSD","TNP", "Ex. Questions","DT. Questions","AVG. Questions"), size = 4)+
coord_cartesian(ylim =c(-30,1900), xlim = c(-7,100))+
geom_point(data = data.frame(Inc_q = included_loadings_dt*1860-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#1B4D3E", inherit.aes = FALSE)+
geom_point(data = data.frame(Inc_q = included_loadings_av*1900-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#6cBE58", inherit.aes = FALSE)+
TypicalTheme
#plot scores
score_plot = ggplot(question_df, aes(x= Question, y = ID))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1)) +
ggtitle(label = "Final Scores for All Subjects", subtitle = "For the 5 Groups of Subjects")+
geom_hline(yintercept=Diagnoses_positions, size=0.5)+
annotate(geom="text", x=-3.5, y=c(Diagnoses_positions-15, -15, 1845, 1885),
label=c("GAD","HC","MDD","PTSD","TNP", "Ex. Questions","DT. Questions","AVG. Questions"), size = 4)+
coord_cartesian(ylim =c(-30,1900), xlim = c(-7,100))+
geom_point(data = data.frame(Inc_q = included_scores_dt*1860-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#1B4D3E", inherit.aes = FALSE)+
geom_point(data = data.frame(Inc_q = included_scores_av*1900-20),mapping = aes(x=1:100, y = Inc_q),
size = 2, color = "#6cBE58", inherit.aes = FALSE)+
TypicalTheme
# return the both figures if mult_plot is set to TRUE. Otherwise, return loadings only
if (plotting == "loadings"){
return (load_plot)
}else if (plotting == "scores"){
return (score_plot)
}else if(plotting == "both"){
return(multiplot(load_plot,score_plot,cols = 2))
}else{
return("Please set a valid argument for plotting, it can be set to 'loadings', 'scores' or 'both'")
}
}
fig_dir = "/home/asawalma/git/TPQ/figures"
if (!dir.exists(fig_dir)) {
fig_dir = "/home/abdulrahman/git/TPQ/figures"
}
#save all figures for each of the IC data frames
sapply(1: length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_FastICA_Boot_",x,".png"),
plot = plot_questions(df_fast_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
sapply(1: length(df_noboot_fast_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_FastICA_NoBoot_",x,".png"),
plot = plot_questions(df_noboot_fast_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
#save all figures for each of the IC data frames
sapply(1: length(df_info_list), function(x)
ggsave(paste0(fig_dir,"/Q_Threshold_Infomax_Boot_",x,".png"),
plot = plot_questions(df_info_list[[x]], plotting = "loadings"), width = 570,
height = 340, units = "mm", limitsize = FALSE))
df_fast_list
```{r similarity matrix, warning=FALSE, cache = TRUE}
df1 = df_fast_list[[1]]
df = df_fast_list[[1]]
df
# define column names to be included for the loadings and those for the weighted final scores
weighted_col_list = sapply(1:100, function(x) paste0("QO",x))
loading_col_list = sapply(1:100, function(x) paste0("Q",x,"_load"))
df[weighted_col_list]
df[loading_col_list]
df[loading_col_list]cor())
cor(df[loading_col_list])
df$Q1 = sapply(1:100, function(x) paste0("Q",x))
sapply(1:100, function(x) paste0("Q",x))
cor.test(df["Q2_load"],df["Q1_load"])
df["Q2_load"]
cor.test(df[["Q2_load"]],df[["Q1_load"]])
cor.test(df[["Q2_load"]],df[["Q1_load"]])$estimate
cor(df[loading_col_list])
new_df = cor(df[loading_col_list])
cor_df = cor(df[loading_col_list])
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df
cor_df = cor(df[loading_col_list])
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df
sapply(1:100, function(x) paste0("Q",x))
cor_df
cor_df = cor(df[loading_col_list])
cor_df
cor_df = data.frame(cor(df[loading_col_list]))
cor_df
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df
melt(cor_df, measure.vars = "Q1")
melt(cor_df, measure.vars = loading_col_list)
melt(cor_df, measure.vars = loading_col_list, variable.name = "Q2")
melt(cor_df, measure.vars = loading_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt = melt(cor_df, measure.vars = loading_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2
cor_df_melt$Q2 =
rep("Q",1:100,"_load")
cor_df_melt$Q2 =
mapply(rep("Q",1:100,"_load"))
cor_df_melt$Q2 =
sapply(1:100, function(x) rep("Q",x,"_load"))
cor_df_melt$Q2 =
sapply(1:100, function(x) paste0("Q",x,"_load"))
cor_df_melt$Q2 =
sapply(1:100, function(x) paste0("Q",x,"_load"))
sapply(1:100, function(x) paste0("Q",x,"_load"))
rep(sapply(1:100, function(x) paste0("Q",x,"_load")),each = 100)
cor_df_melt
cor_df_melt = melt(cor_df, measure.vars = loading_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x,"_load")),each = 100)
cor_df_melt
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
cor_df_melt
ggplot(l_cor, mapping = aes(x=1:100, y=Q1))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1)) +
ggplot(l_cor, mapping = aes(x=1:100, y=Q1))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
ggplot(cor_df_melt, mapping = aes(x=1:100, y=Q1))+
geom_raster(aes(fill=score)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
ggplot(cor_df_melt, mapping = aes(x=1:100, y=Q1))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
ggsave("/home/abdulrahman/git/TPQ/figures/Q_Threshold_FastICA_Boot_1.png",
plot = g_cor, width = 380,
height = 220, units = "mm", limitsize = FALSE)
ggsave("/home/abdulrahman/git/TPQ/figures/Cor.png",
plot = g_cor, width = 380,
height = 220, units = "mm", limitsize = FALSE)
ggsave("/home/abdulrahman/git/TPQ/figures/Cor.png",
plot = g_cor, width = 220,
height = 220, units = "mm", limitsize = FALSE)
ggsave("/home/abdulrahman/git/TPQ/figures/Cor.png",
plot = g_cor, width = 250,
height = 250, units = "mm", limitsize = FALSE)
cor_fun <- function(df){
cor_df = data.frame(cor(df[loading_col_list]))
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = loading_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df)
sapply(1:length(df_fast_list)), function(x)
sapply(1:length(df_fast_list), function(x)
sapply(1:length(df_fast_list), function(x)
ggsave(paste0("/home/abdulrahman/git/TPQ/figures/Cor_fast",x,".png"), plot = df_fast_list[[x]],
width = 250, height = 250, units = "mm", limitsize = FALSE))
fig_dir = "/home/asawalma/git/TPQ/figures"
if (!dir.exists(fig_dir)) {
fig_dir = "/home/abdulrahman/git/TPQ/figures"
}
fig_dir = "/home/asawalma/git/TPQ/figures"
if (!dir.exists(fig_dir)) {
fig_dir = "/home/abdulrahman/git/TPQ/figures"
}
sapply(1:length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_fast",x,".png"), plot = df_fast_list[[x]],
width = 250, height = 250, units = "mm", limitsize = FALSE))
df_fast_list[[x]]
df_fast_list[[1]]
sapply(1:length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_fast",x,".png"), plot = cor_fun(df_fast_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_fast",x,".png"), plot = cor_fun(df_fast_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_noboot_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_fast",x,".png"), plot = cor_fun(df_noboot_fast_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_info_list), function(x)
ggsave(paste0(fig_dir,"/Cor_fast",x,".png"), plot = cor_fun(df_info_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_FastICA_Boot",x,".png"), plot = cor_fun(df_fast_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_noboot_fast_list), function(x)
ggsave(paste0(fig_dir,"/Cor_FastICA_NoBoot",x,".png"), plot = cor_fun(df_noboot_fast_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
sapply(1:length(df_info_list), function(x)
ggsave(paste0(fig_dir,"/Cor_Infomax",x,".png"), plot = cor_fun(df_info_list[[x]]),
width = 250, height = 250, units = "mm", limitsize = FALSE))
plot_questions(df_info_list[[x]], plotting = "both")
c(g1,g2) = plot_questions(df_info_list[[x]], plotting = "both")
plot_questions(df_info_list[[x]], plotting = "both")
plot_questions(df_info_list[[1]], plotting = "both")
plot_questions(df_info_list[[1]], plotting = "both")
plot_questions(df_info_list[[1]], plotting = "both"
)
plot_questions(df_info_list[[1]], plotting = "bot")
cor_fun <- function(df){
cor_df = data.frame(cor(df[weighted_col_list]))
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = weighted_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
fig_dir = "/home/asawalma/git/TPQ/figures"
if (!dir.exists(fig_dir)) {
fig_dir = "/home/abdulrahman/git/TPQ/figures"
}
cor_fun(df_fast_list[[1]])
2
cor_fun(df_fast_list[[2]])
cor_fun(df_fast_list[[5]])
cor_fun(df_fast_list[[6]])
cor.test(df[weighted_col_list])
cor(df[weighted_col_list])
cor(df[weighted_col_list], na.rm = TRUE)
cor(df[weighted_col_list], na.rm = TRUE, method = "spearman")
cor(df[weighted_col_list], method = "spearman")
cor(df$QO1,df$QO2)
cor.test(df$QO1,df$QO2)
df
df = df_fast_list[[1]]
cor.test(df$QO1,df$QO2)
cor.test(df$Q2_load,df$Q1_load)
df1 = df_fast_list[[1]]
df1 = df_fast_list[[1]]
df2 = df_fast_list[[2]]
cor.test(df1$Q2_load,df2$Q2_load)
cor.test(df1$Q2_load,df2$Q1_load)
cor.test(df1$Q2_load,df2$Q3_load)
cor.test(df1$Q2_load,df2$Q4_load)
df1[1]
loading_col_list
cor.test(df1[[loading_col_list[1]]],df2[[loading_col_list[1]]])
mapply(cor.test(df1[[loading_col_list[1:100]]],df2[[loading_col_list[1:100]]]))
mapply(cor.test,df1[[loading_col_list[1:100]]],df2[[loading_col_list[1:100]]])
df1[[loading_col_list[1:100]]]
loading_col_list[1:100]
df1[loading_col_list[1:100]]
mapply(cor.test,df1[loading_col_list[1:100]],df2[loading_col_list[1:100]])
# Create a 4x4 matrix
Q1 <- matrix(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)),4,4)
# Print `Q1`
print(Q1)
# Or use `mapply()`
Q2 <- mapply(rep,1:4,4)
# Print `Q2`
print(Q2)
mapply(rep,1:4,5)
dataPoints_means <- apply(dataPoints, 2, mean)
A <- array(1:24, dim = 4:2)
## no warnings in normal use
sweep(A, 1, 5)
(A.min <- apply(A, 1, min))  # == 1:4
A
array(1:24, dim = 4:2)
A
cor.test(A[,,1],A[,,2])
cor(A)
cor(df1[weighted_col_list])
cor(df1[weighted_col_list],use="pairwise.complete.obs")
install.packages("Hmisc")
library(Hmisc)
cor_fun <- function(df){
cor_df = data.frame(cor(df[weighted_col_list]),use="pairwise.complete.obs")
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = weighted_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df1)
cor_fun <- function(df, type = "loadings"){
if (type == "loadings"){
cor_df = data.frame(cor(df[loading_col_list]),use="pairwise.complete.obs")
} elif (type == "scores"){
cor_fun <- function(df, type = "loadings"){
if (type == "loadings"){
cor_df = data.frame(cor(df[loading_col_list]),use="pairwise.complete.obs")
} else if (type == "scores"){
cor_df = data.frame(cor(df[weighted_col_list]),use="pairwise.complete.obs")
}
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = weighted_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df1, "loadings")
df1
df[loading_col_list]
df1
df
cor_fun <- function(df, type = "loadings"){
if (type == "loadings"){
cor_df = data.frame(cor(df[loading_col_list]),use="pairwise.complete.obs")
} else if (type == "scores"){
cor_df = data.frame(cor(df[weighted_col_list]),use="pairwise.complete.obs")
}
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = weighted_col_list, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df1, "loadings")
cor_fun <- function(df, type = "loadings"){
if (type == "loadings"){
questions_inc = loading_col_list
} else if (type == "scores"){
questions_inc = weighted_col_list
}
cor_df = data.frame(cor(df[questions_inc]),use="pairwise.complete.obs")
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = questions_inc, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df1, "loadings")
cor_fun(df1, "scores")
cor_fun <- function(df, type = "loadings"){
if (type == "loadings"){
questions_inc = loading_col_list
} else if (type == "scores"){
questions_inc = weighted_col_list
}
cor_df = data.frame(cor(df[questions_inc],use="pairwise.complete.obs"))
cor_df$Q1 = sapply(1:100, function(x) paste0("Q",x))
cor_df_melt = melt(cor_df, measure.vars = questions_inc, variable.name = "Q2", value.name = "Correlation")
cor_df_melt$Q2 = rep(sapply(1:100, function(x) paste0("Q",x)),each = 100)
g_cor = ggplot(cor_df_melt, mapping = aes(x=Q1, y=Q2))+
geom_raster(aes(fill=Correlation)) +
scale_fill_gradient2(high="#CC0000", low="#08457E", mid = "white", midpoint = 0, limits = c(-1,1))
return (g_cor)
}
cor_fun(df1, "scores")
options(device = "X11")
library(reticulate)
if (dir.exists("/home/abdulrahman/anaconda3/envs/mne/bin/")){
use_python ("/home/abdulrahman/anaconda3/envs/mne/bin/python3")
}else{
use_python ("/home/asawalma/anaconda3/envs/mne/bin/python")
}
library(ggplot2)
library(psy)
reticulate::repl_python()
